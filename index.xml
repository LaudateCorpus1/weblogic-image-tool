<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>WebLogic Image Tool</title>
    <link>https://oracle.github.io/weblogic-image-tool/</link>
    <description>Recent content on WebLogic Image Tool</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://oracle.github.io/weblogic-image-tool/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title></title>
      <link>https://oracle.github.io/weblogic-image-tool/argument-file/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://oracle.github.io/weblogic-image-tool/argument-file/</guid>
      <description>Use an argument file You can save all arguments passed for the Image Tool in a file, then use the file as a parameter.
For example, create a file called build_args:
create --type wls --version 12.2.1.3.0 --tag wls:122130 --user acmeuser@mycompany.com --httpProxyUrl http://mycompany-proxy:80 --httpsProxyUrl http://mycompany-proxy:80 --passwordEnv MYPWD Use it on the command line, as follows:
imagetool @/path/to/build_args Copyright Copyright (c) 2019, 2021, Oracle and/or its affiliates.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://oracle.github.io/weblogic-image-tool/cache/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://oracle.github.io/weblogic-image-tool/cache/</guid>
      <description>Cache The Image Tool maintains a local file cache store. This store is used to look up where the Java, WebLogic Server installers, and WebLogic Server patches reside in the local file system.
By default, the cache store is located in the user&amp;rsquo;s $HOME/cache directory. Under this directory, the lookup information is stored in the .metadata file. All automatically downloaded patches also reside in this directory.
You can change the default cache store location by setting the environment variable WLSIMG_CACHEDIR:</description>
    </item>
    
    <item>
      <title></title>
      <link>https://oracle.github.io/weblogic-image-tool/cleanup/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://oracle.github.io/weblogic-image-tool/cleanup/</guid>
      <description>Cleanup The Image Tool creates a temporary Docker context directory, prefixed by wlsimgbuilder_temp, every time the tool runs. Under normal circumstances, this context directory will be deleted. However, if the process is aborted or the tool is unable to remove the directory, it is safe for you to delete it manually.
By default, the Image Tool creates the Docker context directory under the user&amp;rsquo;s home directory. If you prefer to use a different directory for the temporary context, set the environment variable WLSIMG_BLDDIR.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://oracle.github.io/weblogic-image-tool/create-image-no-internet/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://oracle.github.io/weblogic-image-tool/create-image-no-internet/</guid>
      <description>Create an image without Internet access In this use case, because there is no Internet access, you will need to download all the installers and patches, plus set up the cache. Also, you must provide a base operating system image that has the following packages installed.
gzip tar unzip Steps   Download these Java and WebLogic installers from the Oracle Software Delivery Cloud and save them in a directory of your choice, for example, /home/acmeuser/wls-installers:</description>
    </item>
    
    <item>
      <title></title>
      <link>https://oracle.github.io/weblogic-image-tool/create-image-wdt/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://oracle.github.io/weblogic-image-tool/create-image-wdt/</guid>
      <description>Create an image with a WebLogic domain using the WebLogic Deploy Tool The Image Tool lets you create a customized WebLogic domain in the image using the WebLogic Deploy Tool.
Steps   Create the image, as directed in the Quick Start guide.
  Download the WebLogic Deploy Tool, and then add it to the cache store:
  imagetool cache addInstaller --type wdt --version 0.22 --path /home/acmeuser/cache/weblogic-deploy.zip Provide the command-line options for the WebLogic Deploy Tool:  imagetool create --fromImage myosimg:latest --tag wls:12.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://oracle.github.io/weblogic-image-tool/create-image-with-internet/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://oracle.github.io/weblogic-image-tool/create-image-with-internet/</guid>
      <description>Create an image with full Internet access The Image Tool supports creating Linux based WebLogic Docker images, applying WebLogic patches, and creating WebLogic domains. It can be used with or without Internet access.
In this use case, the Image Tool will:
 Start with a base-level operating system image (ghcr.io/oracle/oraclelinux:7-slim). Update the image with the necessary packages for installing WebLogic Server. Install Java and WebLogic Server.  Steps   Download these Java and WebLogic installers from the Oracle Software Delivery Cloud and save them in a directory of your choice, for example, /home/acmeuser/wls-installers:</description>
    </item>
    
    <item>
      <title></title>
      <link>https://oracle.github.io/weblogic-image-tool/create-image/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://oracle.github.io/weblogic-image-tool/create-image/</guid>
      <description>Create Image The create command helps build a WebLogic Docker image from a given base OS image. The required option for the command is marked. There are a number of optional parameters for the create feature.
Usage: imagetool create [OPTIONS]    Parameter Definition Default     --additionalBuildCommands Path to a file with additional build commands. For more details, see Additional information.    --additionalBuildFiles Additional files that are required by your additionalBuildCommands.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://oracle.github.io/weblogic-image-tool/logging/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://oracle.github.io/weblogic-image-tool/logging/</guid>
      <description>Logging The Image Tool uses standard Java logging. To alter the default logging settings, you can modify the logging.properties file under the bin directory where you installed the Image Tool.
To enable debug logging In logging.properties, comment the existing handlers property and uncomment the second handlers line below the first line that you just commented. This should make the logging.properties file look something like this:
#handlers=java.util.logging.ConsoleHandler handlers=java.util.logging.FileHandler, java.util.logging.ConsoleHandler Then, change level to FINE or FINER.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://oracle.github.io/weblogic-image-tool/patching-image/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://oracle.github.io/weblogic-image-tool/patching-image/</guid>
      <description>Patch an existing image This example shows you how to apply WebLogic Server patches to an existing image. You can download patches using the Image Tool or by manually downloading them.
Steps   Create the image, as directed in the Quick Start guide.
  For each WebLogic patch, download it from Oracle Support and set up the cache.
For example, to download patch number 27342434 for WebLogic Server version 12.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://oracle.github.io/weblogic-image-tool/quickstart/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://oracle.github.io/weblogic-image-tool/quickstart/</guid>
      <description>Quick Start Use this Quick Start guide to create a Linux based WebLogic Docker image.
Before you begin Make sure that you have fulfilled the Prerequisites and Setup requirements listed for the Image Tool.
Overview The high level steps for creating an image are:
 Download the Java and WebLogic installers from the Oracle Software Delivery Cloud. Add the installers to the cache store. Run the imagetool command to create the image.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://oracle.github.io/weblogic-image-tool/rebase-image/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://oracle.github.io/weblogic-image-tool/rebase-image/</guid>
      <description>Rebase Image The rebase command creates a new Docker image and copies an existing WebLogic domain to that new image.
The new Docker image can be based on an existing image in the repository or created as part of the rebase operation similar to the create command.
Usage: imagetool rebase [OPTIONS]    Parameter Definition Default     --additionalBuildCommands Path to a file with additional build commands. For more details, see Additional information.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://oracle.github.io/weblogic-image-tool/update-image/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://oracle.github.io/weblogic-image-tool/update-image/</guid>
      <description>Update Image After you have created a Docker image with the Image Tool, you may want to change it from time to time. Use the update command to update the existing Docker images created with the Image Tool. For example, you may want to:
 Apply a WebLogic patch Apply the latest PSU from Oracle Create a new WebLogic domain (if one did not already exist) Deploy a new application to an existing domain Modify the domain configuration (add a data source, change a port number, and such)  The required options for the update command are marked.</description>
    </item>
    
  </channel>
</rss>
